"use strict";
// const MAX_WIDTH = 320;
// const MAX_HEIGHT = 180;
// const MIME_TYPE = "image/jpeg";
// const QUALITY = 0.7;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class ImageResizer {
    static resize(url, options = {
        maxWidth: 1024, maxHeight: 768, contentType: "image/jpeg", quality: 0.7
    }) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise(resolve => {
                const img = new Image();
                img.src = url;
                img.onerror = function () {
                    URL.revokeObjectURL(this.src);
                };
                img.onload = function () {
                    URL.revokeObjectURL(this.src);
                    const [newWidth, newHeight] = ImageResizer.calculateSize(img, options.maxWidth, options.maxHeight);
                    const canvas = document.createElement("canvas");
                    canvas.width = newWidth;
                    canvas.height = newHeight;
                    const ctx = canvas.getContext("2d");
                    ctx.drawImage(img, 0, 0, newWidth, newHeight);
                    const resultUrl = canvas.toDataURL(options.contentType, options.quality);
                    const result = {
                        url: resultUrl,
                        contentType: resultUrl.match(/^data\:([^\;]+)\;base64,/mi)[1] || '',
                        b64: resultUrl.replace(/^data\:([^\;]+)\;base64,/gmi, '')
                    };
                    canvas.toBlob(blob => {
                        result.size = blob.size;
                        resolve(result);
                    }, options.contentType, options.quality);
                };
            });
        });
    }
    static calculateSize(img, maxWidth, maxHeight) {
        let width = img.width;
        let height = img.height;
        // calculate the width and height, constraining the proportions
        if (width > height) {
            if (width > maxWidth) {
                height = Math.round((height * maxWidth) / width);
                width = maxWidth;
            }
        }
        else {
            if (height > maxHeight) {
                width = Math.round((width * maxHeight) / height);
                height = maxHeight;
            }
        }
        return [width, height];
    }
}
exports.default = ImageResizer;
//# sourceMappingURL=ImageResizer.js.map