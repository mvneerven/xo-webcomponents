export default Control;
/**
 * XO Control (```<xo-control/>```) - both Base Control for XO, and wrapping Control for other HTML elements
 */
declare class Control {
    static get properties(): {
        name: {
            type: StringConstructor;
            attribute: boolean;
        };
        bind: {
            type: StringConstructor;
        };
        type: {
            type: StringConstructor;
            attribute: boolean;
        };
        hidden: {
            type: BooleanConstructor;
        };
        disabled: {
            type: BooleanConstructor;
        };
        required: {
            type: BooleanConstructor;
        };
        focus: {
            type: BooleanConstructor;
        };
        label: {
            type: StringConstructor;
        };
        tooltip: {
            type: StringConstructor;
        };
        placeholder: {
            type: StringConstructor;
        };
        valid: {
            type: BooleanConstructor;
        };
        value: {
            type: ObjectConstructor;
        };
        prefix: {
            type: ObjectConstructor;
        };
        classes: {
            type: ArrayConstructor;
        };
    };
    static get styles(): CSSStyleSheet[];
    _disabled: boolean;
    _clicked: number;
    _context: any;
    /**
     * @returns {Context} a reference to the Context instance
     */
    get context(): Context;
    /**
     * @returns {Boolean} true if the control is currently valid
     */
    get valid(): boolean;
    /**
     * @returns {HTMLElement} closest element up in hierarchy that matches the given selector.
     * @param selector {String} Selector string
     */
    closestElement(selector: string, base?: Control, __Closest?: (el: any, found?: any) => any): HTMLElement;
    connectedCallback(): void;
    form: any;
    disconnectedCallback(): void;
    firstUpdated(): void;
    acceptMappedState(): void;
    onfocus(e: any): void;
    focus: boolean;
    onInput(e: any): void;
    /**
     * Sets the value of the control - especially when a nested value-managing control is present
     */
    set value(arg: any);
    /**
     * @returns {Object} value of the control - if any
     */
    get value(): any;
    click(e: any): void;
    checkValidity(): any;
    reportValidity(): any;
    onblur(e: any): void;
    fireChange(): void;
    /**
     * Instantiates a Control in the Form Context
     * @param {Context} context
     * @param {String} type
     * @param {Object} properties
     * @param {Object} options
     * @returns {Control}
     */
    createControl(context: Context, type: string, properties: any, options?: any): Control;
    transform(type: any, properties: any): any;
    /**
     * Returns a space-separated string of all classes for the control, based on state and .classes property
     * - hidden: xo-hd
     * - invalid: xo-iv
     * - disabled: xo-ds
     * - focus: xo-fc
     * - textual control: xo-tx
     * - nested element: xo-ne
     * @returns {String}
     */
    getContainerClasses(): string;
    /**
     * Returns true if the control contains a nested textual input
     */
    get isTextual(): any;
    render(): any;
    renderRequiredState(): any;
    renderInput(noContainer: any): any;
    renderNestedElement(noContainer: any): any;
    /**
     * Sets the dual binding for this control, using the syntax #/<instancename>/<property-path>
     * Example: `
     *  {
     *    model: {
     *      instance: {
     *        data: {
     *          userName: "john"
     *        }
     *      }
     *  }
     *  -> #/data/userName
     * `
     */
    set bind(arg: any);
    /**
     * Gets the current dual binding path.
     */
    get bind(): any;
    _bind: any;
    getValidation(): any;
    /**
     * Sets the disabled state of the control
     * @param {Boolean} value
     */
    set disabled(arg: boolean);
    /**
     * @returns {Boolean} true if the control is currently disabled
     */
    get disabled(): boolean;
    toString(): any;
    /**
     * Sets the invalid state message to show
     */
    set invalidMessage(arg: any);
    get invalidMessage(): any;
    _invalidMessage: any;
}
import Context from "./Context";
