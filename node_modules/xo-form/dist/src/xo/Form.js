"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lit_1 = require("lit");
const Control_1 = __importDefault(require("./Control"));
const Validation_1 = __importDefault(require("./Validation"));
const Context_1 = __importDefault(require("./Context"));
const until_js_1 = require("lit/directives/until.js");
const package_json_1 = require("../../package.json");
/**
 * XO Form Control (```<xo-form/>```)
 */
class Form extends Control_1.default {
    constructor() {
        super();
        this.elements = {};
        this._url = new URL(document.location.href);
        this._context = new Context_1.default(this);
        this._page = 1;
    }
    /**
     * Returns package version
     */
    static get version() {
        return package_json_1.version;
    }
    static get properties() {
        return Object.assign(Object.assign({}, Control_1.default.properties), { page: {
                type: Number,
                attribute: true,
            }, schema: {
                type: Object,
            }, src: {
                type: String,
                attribute: true,
            }, theme: {
                type: String,
                attribute: true,
            } });
    }
    /**
     * @returns {Context}
     */
    get context() {
        return this._context;
    }
    /**
     * @param value {Number}
     */
    set page(value) {
        if (value === this._page)
            return;
        if (value < 1)
            return;
        else if (value > this.querySelectorAll("xo-page").length)
            return;
        if (value > this._page) {
            this.validation.isPageValid(this._page);
        }
        this._page = value;
    }
    /**
     * @returns {Number}
     */
    get page() {
        return this._page;
    }
    /**
     * Sets the XO Form Schema to read.
     */
    set schema(schema) {
        this._schema = schema;
        this.requestUpdate();
    }
    /**
     * Gets the XO Form Schema
     */
    get schema() {
        return this._schema;
    }
    /**
     *
     * @param {HTMLElement} element
     */
    registerElement(element) {
        if (element.name) {
            this.elements[element.name] = element;
        }
    }
    /**
     * Sets the URL to read an XO Form Schema from
     */
    set src(url) {
        this._src = url;
    }
    /**
     * Returns the URL to read an XO Form Schema from
     */
    get src() {
        return this._src;
    }
    readSchema() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.schema) {
                if (this.src) {
                    try {
                        let r = yield Promise.resolve().then(() => __importStar(require(this.src)));
                        const key = Object.keys(r)[0];
                        this._schema = r[key];
                    }
                    catch (x) {
                        throw Error("Could not load schema from " + this.src);
                    }
                }
            }
            if (!this.schema)
                return false;
            this.interpretSchema(this.schema);
            return true;
        });
    }
    interpretSchema(schema) {
        if (typeof schema !== "object")
            throw Error("Invalid schema");
        schema.page = "#/_xo/nav/page";
        this.context.data.initialize(schema.model, {
            pageCount: schema.pages.length,
        });
        let index = 1;
        for (let page of schema.pages) {
            page.index = index++;
            let pageElement = this.createControl(this.context, "xo-page", page);
            pageElement.setAttribute("slot", "w");
            this.appendChild(pageElement);
        }
        this.nav = this.createControl(this.context, "xo-nav", schema);
        this.nav.controls = this.nav.controls;
        this.nav.setAttribute("slot", "n");
        this.appendChild(this.nav);
    }
    render() {
        return (0, lit_1.html) `
      ${(0, until_js_1.until)(this.readSchema().then((ready) => {
            if (!ready) {
                return (0, lit_1.html) ``;
            }
            return (0, lit_1.html) `<div class="xo-c" data-page="${this.page}" >
            <form>
                <div class="xo-w">
                    <slot name="w"></slot>
                </div>
                <div class="xo-n">
                    <slot name="n"></slot>
                <div>
            </form>
            <div>`;
        }), (0, lit_1.html) `Loading...`)}
    `;
    }
    firstUpdated() {
        this.validation = new Validation_1.default(this);
        this.checkUrlState();
        this.emit("first-updated");
    }
    emit(name, detail = {}) {
        this.dispatchEvent(new CustomEvent(name, {
            detail: detail,
        }));
    }
    get url() {
        return this._url;
    }
    checkUrlState() {
        // if (this.url.pathname.startsWith("/page/")) {
        //   let pg = parseInt(this.url.pathname.substring(6));
        //   if (pg) {
        //     this.context.data.set("#/_xo/nav/page", pg);
        //   }
        // }
    }
    getSlotted(node) {
        var _a;
        const slot = (_a = node.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector("slot");
        return [...((slot === null || slot === void 0 ? void 0 : slot.assignedElements({ flatten: true })) || [])];
    }
}
exports.default = Form;
window.customElements.define("xo-form", Form);
//# sourceMappingURL=Form.js.map