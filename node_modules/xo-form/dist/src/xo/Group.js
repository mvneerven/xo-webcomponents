"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Control_1 = __importDefault(require("./Control"));
const lit_1 = require("lit");
/**
 * XO Group Control (```<xo-group/>```)
 */
class Group extends Control_1.default {
    static get properties() {
        return {
            layout: { type: String, attribute: true },
            align: { type: String, attribute: true },
            ui: { type: String, attribute: true },
            fields: { type: Array },
        };
    }
    renderInput() {
        return (0, lit_1.html) `<div class="${this.getGroupClasses()}">
      <slot></slot>
    </div>`;
    }
    /**
     * Sets the declarative fields Array to append children with.
     * @param value {Array}
     */
    set fields(value) {
        this._fields = value;
        for (let field of this._fields) {
            let element = this.createControl(this.context, field.type, field);
            this.appendChild(element);
        }
    }
    /**
     * @returns {Array} - Array of schema fields that define the children to be appended.
     */
    get fields() {
        return this._fields;
    }
    getGroupClasses() {
        var _a, _b;
        return `xo-grp ${((_a = this.layout) === null || _a === void 0 ? void 0 : _a.startsWith("hor")) ? "hor" : "ver"} ${(_b = this.align) !== null && _b !== void 0 ? _b : ""}`;
    }
    getContainerClasses() {
        return `${super.getContainerClasses()} xo-gc ${this.ui ? "type-" + this.ui : ""}`;
    }
}
exports.default = Group;
window.customElements.define("xo-group", Group);
//# sourceMappingURL=Group.js.map